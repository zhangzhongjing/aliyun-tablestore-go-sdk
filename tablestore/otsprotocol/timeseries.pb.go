// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: timeseries.proto

package otsprotocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetaQueryConditionType int32

const (
	MetaQueryConditionType_COMPOSITE_CONDITION   MetaQueryConditionType = 1
	MetaQueryConditionType_MEASUREMENT_CONDITION MetaQueryConditionType = 2
	MetaQueryConditionType_SOURCE_CONDITION      MetaQueryConditionType = 3
	MetaQueryConditionType_TAG_CONDITION         MetaQueryConditionType = 4
	MetaQueryConditionType_UPDATE_TIME_CONDITION MetaQueryConditionType = 5
	MetaQueryConditionType_ATTRIBUTE_CONDITION   MetaQueryConditionType = 6
)

// Enum value maps for MetaQueryConditionType.
var (
	MetaQueryConditionType_name = map[int32]string{
		1: "COMPOSITE_CONDITION",
		2: "MEASUREMENT_CONDITION",
		3: "SOURCE_CONDITION",
		4: "TAG_CONDITION",
		5: "UPDATE_TIME_CONDITION",
		6: "ATTRIBUTE_CONDITION",
	}
	MetaQueryConditionType_value = map[string]int32{
		"COMPOSITE_CONDITION":   1,
		"MEASUREMENT_CONDITION": 2,
		"SOURCE_CONDITION":      3,
		"TAG_CONDITION":         4,
		"UPDATE_TIME_CONDITION": 5,
		"ATTRIBUTE_CONDITION":   6,
	}
)

func (x MetaQueryConditionType) Enum() *MetaQueryConditionType {
	p := new(MetaQueryConditionType)
	*p = x
	return p
}

func (x MetaQueryConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaQueryConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_timeseries_proto_enumTypes[0].Descriptor()
}

func (MetaQueryConditionType) Type() protoreflect.EnumType {
	return &file_timeseries_proto_enumTypes[0]
}

func (x MetaQueryConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MetaQueryConditionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MetaQueryConditionType(num)
	return nil
}

// Deprecated: Use MetaQueryConditionType.Descriptor instead.
func (MetaQueryConditionType) EnumDescriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{0}
}

type MetaQueryCompositeOperator int32

const (
	MetaQueryCompositeOperator_OP_AND MetaQueryCompositeOperator = 1
	MetaQueryCompositeOperator_OP_OR  MetaQueryCompositeOperator = 2
	MetaQueryCompositeOperator_OP_NOT MetaQueryCompositeOperator = 3
)

// Enum value maps for MetaQueryCompositeOperator.
var (
	MetaQueryCompositeOperator_name = map[int32]string{
		1: "OP_AND",
		2: "OP_OR",
		3: "OP_NOT",
	}
	MetaQueryCompositeOperator_value = map[string]int32{
		"OP_AND": 1,
		"OP_OR":  2,
		"OP_NOT": 3,
	}
)

func (x MetaQueryCompositeOperator) Enum() *MetaQueryCompositeOperator {
	p := new(MetaQueryCompositeOperator)
	*p = x
	return p
}

func (x MetaQueryCompositeOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaQueryCompositeOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_timeseries_proto_enumTypes[1].Descriptor()
}

func (MetaQueryCompositeOperator) Type() protoreflect.EnumType {
	return &file_timeseries_proto_enumTypes[1]
}

func (x MetaQueryCompositeOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MetaQueryCompositeOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MetaQueryCompositeOperator(num)
	return nil
}

// Deprecated: Use MetaQueryCompositeOperator.Descriptor instead.
func (MetaQueryCompositeOperator) EnumDescriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{1}
}

type MetaQuerySingleOperator int32

const (
	MetaQuerySingleOperator_OP_EQUAL         MetaQuerySingleOperator = 1
	MetaQuerySingleOperator_OP_GREATER_THAN  MetaQuerySingleOperator = 2
	MetaQuerySingleOperator_OP_GREATER_EQUAL MetaQuerySingleOperator = 3
	MetaQuerySingleOperator_OP_LESS_THAN     MetaQuerySingleOperator = 4
	MetaQuerySingleOperator_OP_LESS_EQUAL    MetaQuerySingleOperator = 5
	MetaQuerySingleOperator_OP_PREFIX        MetaQuerySingleOperator = 6
)

// Enum value maps for MetaQuerySingleOperator.
var (
	MetaQuerySingleOperator_name = map[int32]string{
		1: "OP_EQUAL",
		2: "OP_GREATER_THAN",
		3: "OP_GREATER_EQUAL",
		4: "OP_LESS_THAN",
		5: "OP_LESS_EQUAL",
		6: "OP_PREFIX",
	}
	MetaQuerySingleOperator_value = map[string]int32{
		"OP_EQUAL":         1,
		"OP_GREATER_THAN":  2,
		"OP_GREATER_EQUAL": 3,
		"OP_LESS_THAN":     4,
		"OP_LESS_EQUAL":    5,
		"OP_PREFIX":        6,
	}
)

func (x MetaQuerySingleOperator) Enum() *MetaQuerySingleOperator {
	p := new(MetaQuerySingleOperator)
	*p = x
	return p
}

func (x MetaQuerySingleOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaQuerySingleOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_timeseries_proto_enumTypes[2].Descriptor()
}

func (MetaQuerySingleOperator) Type() protoreflect.EnumType {
	return &file_timeseries_proto_enumTypes[2]
}

func (x MetaQuerySingleOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MetaQuerySingleOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MetaQuerySingleOperator(num)
	return nil
}

// Deprecated: Use MetaQuerySingleOperator.Descriptor instead.
func (MetaQuerySingleOperator) EnumDescriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{2}
}

type RowsSerializeType int32

const (
	RowsSerializeType_RST_FLAT_BUFFER  RowsSerializeType = 0
	RowsSerializeType_RST_PLAIN_BUFFER RowsSerializeType = 1
	RowsSerializeType_RST_PROTO_BUFFER RowsSerializeType = 2
)

// Enum value maps for RowsSerializeType.
var (
	RowsSerializeType_name = map[int32]string{
		0: "RST_FLAT_BUFFER",
		1: "RST_PLAIN_BUFFER",
		2: "RST_PROTO_BUFFER",
	}
	RowsSerializeType_value = map[string]int32{
		"RST_FLAT_BUFFER":  0,
		"RST_PLAIN_BUFFER": 1,
		"RST_PROTO_BUFFER": 2,
	}
)

func (x RowsSerializeType) Enum() *RowsSerializeType {
	p := new(RowsSerializeType)
	*p = x
	return p
}

func (x RowsSerializeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowsSerializeType) Descriptor() protoreflect.EnumDescriptor {
	return file_timeseries_proto_enumTypes[3].Descriptor()
}

func (RowsSerializeType) Type() protoreflect.EnumType {
	return &file_timeseries_proto_enumTypes[3]
}

func (x RowsSerializeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RowsSerializeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RowsSerializeType(num)
	return nil
}

// Deprecated: Use RowsSerializeType.Descriptor instead.
func (RowsSerializeType) EnumDescriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{3}
}

type MetaUpdateMode int32

const (
	MetaUpdateMode_MUM_NORMAL MetaUpdateMode = 0
	MetaUpdateMode_MUM_IGNORE MetaUpdateMode = 1
)

// Enum value maps for MetaUpdateMode.
var (
	MetaUpdateMode_name = map[int32]string{
		0: "MUM_NORMAL",
		1: "MUM_IGNORE",
	}
	MetaUpdateMode_value = map[string]int32{
		"MUM_NORMAL": 0,
		"MUM_IGNORE": 1,
	}
)

func (x MetaUpdateMode) Enum() *MetaUpdateMode {
	p := new(MetaUpdateMode)
	*p = x
	return p
}

func (x MetaUpdateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaUpdateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_timeseries_proto_enumTypes[4].Descriptor()
}

func (MetaUpdateMode) Type() protoreflect.EnumType {
	return &file_timeseries_proto_enumTypes[4]
}

func (x MetaUpdateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MetaUpdateMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MetaUpdateMode(num)
	return nil
}

// Deprecated: Use MetaUpdateMode.Descriptor instead.
func (MetaUpdateMode) EnumDescriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{4}
}

type TimeseriesTableOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeToLive *int32 `protobuf:"varint,1,opt,name=time_to_live,json=timeToLive" json:"time_to_live,omitempty"`
}

func (x *TimeseriesTableOptions) Reset() {
	*x = TimeseriesTableOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesTableOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesTableOptions) ProtoMessage() {}

func (x *TimeseriesTableOptions) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesTableOptions.ProtoReflect.Descriptor instead.
func (*TimeseriesTableOptions) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{0}
}

func (x *TimeseriesTableOptions) GetTimeToLive() int32 {
	if x != nil && x.TimeToLive != nil {
		return *x.TimeToLive
	}
	return 0
}

type TimeseriesTableMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    *string                 `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableOptions *TimeseriesTableOptions `protobuf:"bytes,2,opt,name=table_options,json=tableOptions" json:"table_options,omitempty"`
	Status       *string                 `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *TimeseriesTableMeta) Reset() {
	*x = TimeseriesTableMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesTableMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesTableMeta) ProtoMessage() {}

func (x *TimeseriesTableMeta) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesTableMeta.ProtoReflect.Descriptor instead.
func (*TimeseriesTableMeta) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{1}
}

func (x *TimeseriesTableMeta) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TimeseriesTableMeta) GetTableOptions() *TimeseriesTableOptions {
	if x != nil {
		return x.TableOptions
	}
	return nil
}

func (x *TimeseriesTableMeta) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type CreateTimeseriesTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableMeta *TimeseriesTableMeta `protobuf:"bytes,1,req,name=table_meta,json=tableMeta" json:"table_meta,omitempty"`
}

func (x *CreateTimeseriesTableRequest) Reset() {
	*x = CreateTimeseriesTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTimeseriesTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTimeseriesTableRequest) ProtoMessage() {}

func (x *CreateTimeseriesTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTimeseriesTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTimeseriesTableRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTimeseriesTableRequest) GetTableMeta() *TimeseriesTableMeta {
	if x != nil {
		return x.TableMeta
	}
	return nil
}

type CreateTimeseriesTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTimeseriesTableResponse) Reset() {
	*x = CreateTimeseriesTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTimeseriesTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTimeseriesTableResponse) ProtoMessage() {}

func (x *CreateTimeseriesTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTimeseriesTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTimeseriesTableResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{3}
}

type ListTimeseriesTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTimeseriesTableRequest) Reset() {
	*x = ListTimeseriesTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTimeseriesTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimeseriesTableRequest) ProtoMessage() {}

func (x *ListTimeseriesTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimeseriesTableRequest.ProtoReflect.Descriptor instead.
func (*ListTimeseriesTableRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{4}
}

type ListTimeseriesTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableMetas []*TimeseriesTableMeta `protobuf:"bytes,1,rep,name=table_metas,json=tableMetas" json:"table_metas,omitempty"`
}

func (x *ListTimeseriesTableResponse) Reset() {
	*x = ListTimeseriesTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTimeseriesTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimeseriesTableResponse) ProtoMessage() {}

func (x *ListTimeseriesTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimeseriesTableResponse.ProtoReflect.Descriptor instead.
func (*ListTimeseriesTableResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{5}
}

func (x *ListTimeseriesTableResponse) GetTableMetas() []*TimeseriesTableMeta {
	if x != nil {
		return x.TableMetas
	}
	return nil
}

type DeleteTimeseriesTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (x *DeleteTimeseriesTableRequest) Reset() {
	*x = DeleteTimeseriesTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTimeseriesTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTimeseriesTableRequest) ProtoMessage() {}

func (x *DeleteTimeseriesTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTimeseriesTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTimeseriesTableRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTimeseriesTableRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type DeleteTimeseriesTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTimeseriesTableResponse) Reset() {
	*x = DeleteTimeseriesTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTimeseriesTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTimeseriesTableResponse) ProtoMessage() {}

func (x *DeleteTimeseriesTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTimeseriesTableResponse.ProtoReflect.Descriptor instead.
func (*DeleteTimeseriesTableResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{7}
}

type UpdateTimeseriesTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    *string                 `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableOptions *TimeseriesTableOptions `protobuf:"bytes,2,opt,name=table_options,json=tableOptions" json:"table_options,omitempty"`
}

func (x *UpdateTimeseriesTableRequest) Reset() {
	*x = UpdateTimeseriesTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTimeseriesTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTimeseriesTableRequest) ProtoMessage() {}

func (x *UpdateTimeseriesTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTimeseriesTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateTimeseriesTableRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTimeseriesTableRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *UpdateTimeseriesTableRequest) GetTableOptions() *TimeseriesTableOptions {
	if x != nil {
		return x.TableOptions
	}
	return nil
}

type UpdateTimeseriesTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTimeseriesTableResponse) Reset() {
	*x = UpdateTimeseriesTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTimeseriesTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTimeseriesTableResponse) ProtoMessage() {}

func (x *UpdateTimeseriesTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTimeseriesTableResponse.ProtoReflect.Descriptor instead.
func (*UpdateTimeseriesTableResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{9}
}

type DescribeTimeseriesTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (x *DescribeTimeseriesTableRequest) Reset() {
	*x = DescribeTimeseriesTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTimeseriesTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTimeseriesTableRequest) ProtoMessage() {}

func (x *DescribeTimeseriesTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTimeseriesTableRequest.ProtoReflect.Descriptor instead.
func (*DescribeTimeseriesTableRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeTimeseriesTableRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type DescribeTimeseriesTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableMeta *TimeseriesTableMeta `protobuf:"bytes,1,req,name=table_meta,json=tableMeta" json:"table_meta,omitempty"`
}

func (x *DescribeTimeseriesTableResponse) Reset() {
	*x = DescribeTimeseriesTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTimeseriesTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTimeseriesTableResponse) ProtoMessage() {}

func (x *DescribeTimeseriesTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTimeseriesTableResponse.ProtoReflect.Descriptor instead.
func (*DescribeTimeseriesTableResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeTimeseriesTableResponse) GetTableMeta() *TimeseriesTableMeta {
	if x != nil {
		return x.TableMeta
	}
	return nil
}

type MetaQueryCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *MetaQueryConditionType `protobuf:"varint,1,req,name=type,enum=otsprotocol.MetaQueryConditionType" json:"type,omitempty"`
	ProtoData []byte                  `protobuf:"bytes,2,req,name=proto_data,json=protoData" json:"proto_data,omitempty"`
}

func (x *MetaQueryCondition) Reset() {
	*x = MetaQueryCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQueryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQueryCondition) ProtoMessage() {}

func (x *MetaQueryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQueryCondition.ProtoReflect.Descriptor instead.
func (*MetaQueryCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{12}
}

func (x *MetaQueryCondition) GetType() MetaQueryConditionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MetaQueryConditionType_COMPOSITE_CONDITION
}

func (x *MetaQueryCondition) GetProtoData() []byte {
	if x != nil {
		return x.ProtoData
	}
	return nil
}

type MetaQueryCompositeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op            *MetaQueryCompositeOperator `protobuf:"varint,1,req,name=op,enum=otsprotocol.MetaQueryCompositeOperator" json:"op,omitempty"`
	SubConditions []*MetaQueryCondition       `protobuf:"bytes,2,rep,name=sub_conditions,json=subConditions" json:"sub_conditions,omitempty"`
}

func (x *MetaQueryCompositeCondition) Reset() {
	*x = MetaQueryCompositeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQueryCompositeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQueryCompositeCondition) ProtoMessage() {}

func (x *MetaQueryCompositeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQueryCompositeCondition.ProtoReflect.Descriptor instead.
func (*MetaQueryCompositeCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{13}
}

func (x *MetaQueryCompositeCondition) GetOp() MetaQueryCompositeOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return MetaQueryCompositeOperator_OP_AND
}

func (x *MetaQueryCompositeCondition) GetSubConditions() []*MetaQueryCondition {
	if x != nil {
		return x.SubConditions
	}
	return nil
}

type MetaQueryMeasurementCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    *MetaQuerySingleOperator `protobuf:"varint,1,req,name=op,enum=otsprotocol.MetaQuerySingleOperator" json:"op,omitempty"`
	Value *string                  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *MetaQueryMeasurementCondition) Reset() {
	*x = MetaQueryMeasurementCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQueryMeasurementCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQueryMeasurementCondition) ProtoMessage() {}

func (x *MetaQueryMeasurementCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQueryMeasurementCondition.ProtoReflect.Descriptor instead.
func (*MetaQueryMeasurementCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{14}
}

func (x *MetaQueryMeasurementCondition) GetOp() MetaQuerySingleOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return MetaQuerySingleOperator_OP_EQUAL
}

func (x *MetaQueryMeasurementCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type MetaQuerySourceCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    *MetaQuerySingleOperator `protobuf:"varint,1,req,name=op,enum=otsprotocol.MetaQuerySingleOperator" json:"op,omitempty"`
	Value *string                  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *MetaQuerySourceCondition) Reset() {
	*x = MetaQuerySourceCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQuerySourceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQuerySourceCondition) ProtoMessage() {}

func (x *MetaQuerySourceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQuerySourceCondition.ProtoReflect.Descriptor instead.
func (*MetaQuerySourceCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{15}
}

func (x *MetaQuerySourceCondition) GetOp() MetaQuerySingleOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return MetaQuerySingleOperator_OP_EQUAL
}

func (x *MetaQuerySourceCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type MetaQueryTagCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op      *MetaQuerySingleOperator `protobuf:"varint,1,req,name=op,enum=otsprotocol.MetaQuerySingleOperator" json:"op,omitempty"`
	TagName *string                  `protobuf:"bytes,2,req,name=tag_name,json=tagName" json:"tag_name,omitempty"`
	Value   *string                  `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
}

func (x *MetaQueryTagCondition) Reset() {
	*x = MetaQueryTagCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQueryTagCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQueryTagCondition) ProtoMessage() {}

func (x *MetaQueryTagCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQueryTagCondition.ProtoReflect.Descriptor instead.
func (*MetaQueryTagCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{16}
}

func (x *MetaQueryTagCondition) GetOp() MetaQuerySingleOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return MetaQuerySingleOperator_OP_EQUAL
}

func (x *MetaQueryTagCondition) GetTagName() string {
	if x != nil && x.TagName != nil {
		return *x.TagName
	}
	return ""
}

func (x *MetaQueryTagCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type MetaQueryAttributeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       *MetaQuerySingleOperator `protobuf:"varint,1,req,name=op,enum=otsprotocol.MetaQuerySingleOperator" json:"op,omitempty"`
	AttrName *string                  `protobuf:"bytes,2,req,name=attr_name,json=attrName" json:"attr_name,omitempty"`
	Value    *string                  `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
}

func (x *MetaQueryAttributeCondition) Reset() {
	*x = MetaQueryAttributeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQueryAttributeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQueryAttributeCondition) ProtoMessage() {}

func (x *MetaQueryAttributeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQueryAttributeCondition.ProtoReflect.Descriptor instead.
func (*MetaQueryAttributeCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{17}
}

func (x *MetaQueryAttributeCondition) GetOp() MetaQuerySingleOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return MetaQuerySingleOperator_OP_EQUAL
}

func (x *MetaQueryAttributeCondition) GetAttrName() string {
	if x != nil && x.AttrName != nil {
		return *x.AttrName
	}
	return ""
}

func (x *MetaQueryAttributeCondition) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type MetaQueryUpdateTimeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    *MetaQuerySingleOperator `protobuf:"varint,1,req,name=op,enum=otsprotocol.MetaQuerySingleOperator" json:"op,omitempty"`
	Value *int64                   `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *MetaQueryUpdateTimeCondition) Reset() {
	*x = MetaQueryUpdateTimeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaQueryUpdateTimeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaQueryUpdateTimeCondition) ProtoMessage() {}

func (x *MetaQueryUpdateTimeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaQueryUpdateTimeCondition.ProtoReflect.Descriptor instead.
func (*MetaQueryUpdateTimeCondition) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{18}
}

func (x *MetaQueryUpdateTimeCondition) GetOp() MetaQuerySingleOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return MetaQuerySingleOperator_OP_EQUAL
}

func (x *MetaQueryUpdateTimeCondition) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TimeseriesKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurement *string `protobuf:"bytes,1,req,name=measurement" json:"measurement,omitempty"`
	Source      *string `protobuf:"bytes,2,req,name=source" json:"source,omitempty"`
	Tags        *string `protobuf:"bytes,3,req,name=tags" json:"tags,omitempty"`
}

func (x *TimeseriesKey) Reset() {
	*x = TimeseriesKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesKey) ProtoMessage() {}

func (x *TimeseriesKey) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesKey.ProtoReflect.Descriptor instead.
func (*TimeseriesKey) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{19}
}

func (x *TimeseriesKey) GetMeasurement() string {
	if x != nil && x.Measurement != nil {
		return *x.Measurement
	}
	return ""
}

func (x *TimeseriesKey) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *TimeseriesKey) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

type TimeseriesMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSeriesKey *TimeseriesKey `protobuf:"bytes,1,req,name=time_series_key,json=timeSeriesKey" json:"time_series_key,omitempty"`
	Attributes    *string        `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
	UpdateTime    *int64         `protobuf:"varint,3,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (x *TimeseriesMeta) Reset() {
	*x = TimeseriesMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesMeta) ProtoMessage() {}

func (x *TimeseriesMeta) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesMeta.ProtoReflect.Descriptor instead.
func (*TimeseriesMeta) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{20}
}

func (x *TimeseriesMeta) GetTimeSeriesKey() *TimeseriesKey {
	if x != nil {
		return x.TimeSeriesKey
	}
	return nil
}

func (x *TimeseriesMeta) GetAttributes() string {
	if x != nil && x.Attributes != nil {
		return *x.Attributes
	}
	return ""
}

func (x *TimeseriesMeta) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

type QueryTimeseriesMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName   *string             `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	Condition   *MetaQueryCondition `protobuf:"bytes,2,opt,name=condition" json:"condition,omitempty"`
	GetTotalHit *bool               `protobuf:"varint,3,opt,name=get_total_hit,json=getTotalHit" json:"get_total_hit,omitempty"`
	Token       []byte              `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	Limit       *int32              `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (x *QueryTimeseriesMetaRequest) Reset() {
	*x = QueryTimeseriesMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeseriesMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeseriesMetaRequest) ProtoMessage() {}

func (x *QueryTimeseriesMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeseriesMetaRequest.ProtoReflect.Descriptor instead.
func (*QueryTimeseriesMetaRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{21}
}

func (x *QueryTimeseriesMetaRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *QueryTimeseriesMetaRequest) GetCondition() *MetaQueryCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *QueryTimeseriesMetaRequest) GetGetTotalHit() bool {
	if x != nil && x.GetTotalHit != nil {
		return *x.GetTotalHit
	}
	return false
}

func (x *QueryTimeseriesMetaRequest) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *QueryTimeseriesMetaRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type QueryTimeseriesMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeseriesMetas []*TimeseriesMeta `protobuf:"bytes,1,rep,name=timeseries_metas,json=timeseriesMetas" json:"timeseries_metas,omitempty"`
	TotalHit        *int64            `protobuf:"varint,2,opt,name=total_hit,json=totalHit" json:"total_hit,omitempty"`
	NextToken       []byte            `protobuf:"bytes,3,opt,name=next_token,json=nextToken" json:"next_token,omitempty"`
}

func (x *QueryTimeseriesMetaResponse) Reset() {
	*x = QueryTimeseriesMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeseriesMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeseriesMetaResponse) ProtoMessage() {}

func (x *QueryTimeseriesMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeseriesMetaResponse.ProtoReflect.Descriptor instead.
func (*QueryTimeseriesMetaResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{22}
}

func (x *QueryTimeseriesMetaResponse) GetTimeseriesMetas() []*TimeseriesMeta {
	if x != nil {
		return x.TimeseriesMetas
	}
	return nil
}

func (x *QueryTimeseriesMetaResponse) GetTotalHit() int64 {
	if x != nil && x.TotalHit != nil {
		return *x.TotalHit
	}
	return 0
}

func (x *QueryTimeseriesMetaResponse) GetNextToken() []byte {
	if x != nil {
		return x.NextToken
	}
	return nil
}

type TimeseriesRows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *RowsSerializeType `protobuf:"varint,1,req,name=type,enum=otsprotocol.RowsSerializeType" json:"type,omitempty"`
	RowsData         []byte             `protobuf:"bytes,2,req,name=rows_data,json=rowsData" json:"rows_data,omitempty"`
	FlatbufferCrc32C *int32             `protobuf:"varint,3,opt,name=flatbuffer_crc32c,json=flatbufferCrc32c" json:"flatbuffer_crc32c,omitempty"`
}

func (x *TimeseriesRows) Reset() {
	*x = TimeseriesRows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesRows) ProtoMessage() {}

func (x *TimeseriesRows) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesRows.ProtoReflect.Descriptor instead.
func (*TimeseriesRows) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{23}
}

func (x *TimeseriesRows) GetType() RowsSerializeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RowsSerializeType_RST_FLAT_BUFFER
}

func (x *TimeseriesRows) GetRowsData() []byte {
	if x != nil {
		return x.RowsData
	}
	return nil
}

func (x *TimeseriesRows) GetFlatbufferCrc32C() int32 {
	if x != nil && x.FlatbufferCrc32C != nil {
		return *x.FlatbufferCrc32C
	}
	return 0
}

type PutTimeseriesDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      *string         `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	RowsData       *TimeseriesRows `protobuf:"bytes,2,req,name=rows_data,json=rowsData" json:"rows_data,omitempty"`
	MetaUpdateMode *MetaUpdateMode `protobuf:"varint,3,opt,name=meta_update_mode,json=metaUpdateMode,enum=otsprotocol.MetaUpdateMode" json:"meta_update_mode,omitempty"`
}

func (x *PutTimeseriesDataRequest) Reset() {
	*x = PutTimeseriesDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTimeseriesDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTimeseriesDataRequest) ProtoMessage() {}

func (x *PutTimeseriesDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTimeseriesDataRequest.ProtoReflect.Descriptor instead.
func (*PutTimeseriesDataRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{24}
}

func (x *PutTimeseriesDataRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *PutTimeseriesDataRequest) GetRowsData() *TimeseriesRows {
	if x != nil {
		return x.RowsData
	}
	return nil
}

func (x *PutTimeseriesDataRequest) GetMetaUpdateMode() MetaUpdateMode {
	if x != nil && x.MetaUpdateMode != nil {
		return *x.MetaUpdateMode
	}
	return MetaUpdateMode_MUM_NORMAL
}

type FailedRowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowIndex     *int32  `protobuf:"varint,1,req,name=row_index,json=rowIndex" json:"row_index,omitempty"`
	ErrorCode    *string `protobuf:"bytes,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorMessage *string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *FailedRowInfo) Reset() {
	*x = FailedRowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedRowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedRowInfo) ProtoMessage() {}

func (x *FailedRowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedRowInfo.ProtoReflect.Descriptor instead.
func (*FailedRowInfo) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{25}
}

func (x *FailedRowInfo) GetRowIndex() int32 {
	if x != nil && x.RowIndex != nil {
		return *x.RowIndex
	}
	return 0
}

func (x *FailedRowInfo) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *FailedRowInfo) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type MetaUpdateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowIds          []uint32 `protobuf:"varint,1,rep,name=row_ids,json=rowIds" json:"row_ids,omitempty"`
	MetaUpdateTimes []uint32 `protobuf:"varint,2,rep,name=meta_update_times,json=metaUpdateTimes" json:"meta_update_times,omitempty"`
}

func (x *MetaUpdateStatus) Reset() {
	*x = MetaUpdateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaUpdateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaUpdateStatus) ProtoMessage() {}

func (x *MetaUpdateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaUpdateStatus.ProtoReflect.Descriptor instead.
func (*MetaUpdateStatus) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{26}
}

func (x *MetaUpdateStatus) GetRowIds() []uint32 {
	if x != nil {
		return x.RowIds
	}
	return nil
}

func (x *MetaUpdateStatus) GetMetaUpdateTimes() []uint32 {
	if x != nil {
		return x.MetaUpdateTimes
	}
	return nil
}

type PutTimeseriesDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedRows       []*FailedRowInfo  `protobuf:"bytes,1,rep,name=failed_rows,json=failedRows" json:"failed_rows,omitempty"`
	MetaUpdateStatus *MetaUpdateStatus `protobuf:"bytes,2,opt,name=meta_update_status,json=metaUpdateStatus" json:"meta_update_status,omitempty"`
}

func (x *PutTimeseriesDataResponse) Reset() {
	*x = PutTimeseriesDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTimeseriesDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTimeseriesDataResponse) ProtoMessage() {}

func (x *PutTimeseriesDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTimeseriesDataResponse.ProtoReflect.Descriptor instead.
func (*PutTimeseriesDataResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{27}
}

func (x *PutTimeseriesDataResponse) GetFailedRows() []*FailedRowInfo {
	if x != nil {
		return x.FailedRows
	}
	return nil
}

func (x *PutTimeseriesDataResponse) GetMetaUpdateStatus() *MetaUpdateStatus {
	if x != nil {
		return x.MetaUpdateStatus
	}
	return nil
}

type GetTimeseriesDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName     *string                  `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TimeSeriesKey *TimeseriesKey           `protobuf:"bytes,2,req,name=time_series_key,json=timeSeriesKey" json:"time_series_key,omitempty"`
	BeginTime     *int64                   `protobuf:"varint,3,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	EndTime       *int64                   `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	SpecificTime  *int64                   `protobuf:"varint,5,opt,name=specific_time,json=specificTime" json:"specific_time,omitempty"`
	Token         []byte                   `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	Limit         *int32                   `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	Backward      *bool                    `protobuf:"varint,8,opt,name=backward" json:"backward,omitempty"`
	FieldsToGet   []*TimeseriesFieldsToGet `protobuf:"bytes,9,rep,name=fields_to_get,json=fieldsToGet" json:"fields_to_get,omitempty"`
}

func (x *GetTimeseriesDataRequest) Reset() {
	*x = GetTimeseriesDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeseriesDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeseriesDataRequest) ProtoMessage() {}

func (x *GetTimeseriesDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeseriesDataRequest.ProtoReflect.Descriptor instead.
func (*GetTimeseriesDataRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{28}
}

func (x *GetTimeseriesDataRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *GetTimeseriesDataRequest) GetTimeSeriesKey() *TimeseriesKey {
	if x != nil {
		return x.TimeSeriesKey
	}
	return nil
}

func (x *GetTimeseriesDataRequest) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *GetTimeseriesDataRequest) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *GetTimeseriesDataRequest) GetSpecificTime() int64 {
	if x != nil && x.SpecificTime != nil {
		return *x.SpecificTime
	}
	return 0
}

func (x *GetTimeseriesDataRequest) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetTimeseriesDataRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetTimeseriesDataRequest) GetBackward() bool {
	if x != nil && x.Backward != nil {
		return *x.Backward
	}
	return false
}

func (x *GetTimeseriesDataRequest) GetFieldsToGet() []*TimeseriesFieldsToGet {
	if x != nil {
		return x.FieldsToGet
	}
	return nil
}

type TimeseriesFieldsToGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (x *TimeseriesFieldsToGet) Reset() {
	*x = TimeseriesFieldsToGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesFieldsToGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesFieldsToGet) ProtoMessage() {}

func (x *TimeseriesFieldsToGet) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesFieldsToGet.ProtoReflect.Descriptor instead.
func (*TimeseriesFieldsToGet) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{29}
}

func (x *TimeseriesFieldsToGet) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TimeseriesFieldsToGet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type GetTimeseriesDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsData  []byte `protobuf:"bytes,1,req,name=rows_data,json=rowsData" json:"rows_data,omitempty"`
	NextToken []byte `protobuf:"bytes,2,opt,name=next_token,json=nextToken" json:"next_token,omitempty"`
}

func (x *GetTimeseriesDataResponse) Reset() {
	*x = GetTimeseriesDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeseriesDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeseriesDataResponse) ProtoMessage() {}

func (x *GetTimeseriesDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeseriesDataResponse.ProtoReflect.Descriptor instead.
func (*GetTimeseriesDataResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{30}
}

func (x *GetTimeseriesDataResponse) GetRowsData() []byte {
	if x != nil {
		return x.RowsData
	}
	return nil
}

func (x *GetTimeseriesDataResponse) GetNextToken() []byte {
	if x != nil {
		return x.NextToken
	}
	return nil
}

type UpdateTimeseriesMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      *string           `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TimeseriesMeta []*TimeseriesMeta `protobuf:"bytes,2,rep,name=timeseries_meta,json=timeseriesMeta" json:"timeseries_meta,omitempty"`
}

func (x *UpdateTimeseriesMetaRequest) Reset() {
	*x = UpdateTimeseriesMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTimeseriesMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTimeseriesMetaRequest) ProtoMessage() {}

func (x *UpdateTimeseriesMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTimeseriesMetaRequest.ProtoReflect.Descriptor instead.
func (*UpdateTimeseriesMetaRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateTimeseriesMetaRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *UpdateTimeseriesMetaRequest) GetTimeseriesMeta() []*TimeseriesMeta {
	if x != nil {
		return x.TimeseriesMeta
	}
	return nil
}

type UpdateTimeseriesMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedRows []*FailedRowInfo `protobuf:"bytes,1,rep,name=failed_rows,json=failedRows" json:"failed_rows,omitempty"`
}

func (x *UpdateTimeseriesMetaResponse) Reset() {
	*x = UpdateTimeseriesMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTimeseriesMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTimeseriesMetaResponse) ProtoMessage() {}

func (x *UpdateTimeseriesMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTimeseriesMetaResponse.ProtoReflect.Descriptor instead.
func (*UpdateTimeseriesMetaResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateTimeseriesMetaResponse) GetFailedRows() []*FailedRowInfo {
	if x != nil {
		return x.FailedRows
	}
	return nil
}

type DeleteTimeseriesMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName     *string          `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TimeseriesKey []*TimeseriesKey `protobuf:"bytes,2,rep,name=timeseries_key,json=timeseriesKey" json:"timeseries_key,omitempty"`
}

func (x *DeleteTimeseriesMetaRequest) Reset() {
	*x = DeleteTimeseriesMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTimeseriesMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTimeseriesMetaRequest) ProtoMessage() {}

func (x *DeleteTimeseriesMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTimeseriesMetaRequest.ProtoReflect.Descriptor instead.
func (*DeleteTimeseriesMetaRequest) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteTimeseriesMetaRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *DeleteTimeseriesMetaRequest) GetTimeseriesKey() []*TimeseriesKey {
	if x != nil {
		return x.TimeseriesKey
	}
	return nil
}

type DeleteTimeseriesMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedRows []*FailedRowInfo `protobuf:"bytes,1,rep,name=failed_rows,json=failedRows" json:"failed_rows,omitempty"`
}

func (x *DeleteTimeseriesMetaResponse) Reset() {
	*x = DeleteTimeseriesMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTimeseriesMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTimeseriesMetaResponse) ProtoMessage() {}

func (x *DeleteTimeseriesMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTimeseriesMetaResponse.ProtoReflect.Descriptor instead.
func (*DeleteTimeseriesMetaResponse) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteTimeseriesMetaResponse) GetFailedRows() []*FailedRowInfo {
	if x != nil {
		return x.FailedRows
	}
	return nil
}

type TimeseriesField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   *string  `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	ValueInt    *int64   `protobuf:"varint,2,opt,name=value_int,json=valueInt" json:"value_int,omitempty"`
	ValueString *string  `protobuf:"bytes,3,opt,name=value_string,json=valueString" json:"value_string,omitempty"`
	ValueBool   *bool    `protobuf:"varint,4,opt,name=value_bool,json=valueBool" json:"value_bool,omitempty"`
	ValueDouble *float64 `protobuf:"fixed64,5,opt,name=value_double,json=valueDouble" json:"value_double,omitempty"`
	ValueBinary []byte   `protobuf:"bytes,6,opt,name=value_binary,json=valueBinary" json:"value_binary,omitempty"`
}

func (x *TimeseriesField) Reset() {
	*x = TimeseriesField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesField) ProtoMessage() {}

func (x *TimeseriesField) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesField.ProtoReflect.Descriptor instead.
func (*TimeseriesField) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{35}
}

func (x *TimeseriesField) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *TimeseriesField) GetValueInt() int64 {
	if x != nil && x.ValueInt != nil {
		return *x.ValueInt
	}
	return 0
}

func (x *TimeseriesField) GetValueString() string {
	if x != nil && x.ValueString != nil {
		return *x.ValueString
	}
	return ""
}

func (x *TimeseriesField) GetValueBool() bool {
	if x != nil && x.ValueBool != nil {
		return *x.ValueBool
	}
	return false
}

func (x *TimeseriesField) GetValueDouble() float64 {
	if x != nil && x.ValueDouble != nil {
		return *x.ValueDouble
	}
	return 0
}

func (x *TimeseriesField) GetValueBinary() []byte {
	if x != nil {
		return x.ValueBinary
	}
	return nil
}

type TimeseriesRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeseriesKey       *TimeseriesKey     `protobuf:"bytes,1,opt,name=timeseries_key,json=timeseriesKey" json:"timeseries_key,omitempty"`
	Time                *int64             `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Fields              []*TimeseriesField `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	MetaCacheUpdateTime *uint32            `protobuf:"varint,4,opt,name=meta_cache_update_time,json=metaCacheUpdateTime" json:"meta_cache_update_time,omitempty"`
}

func (x *TimeseriesRow) Reset() {
	*x = TimeseriesRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesRow) ProtoMessage() {}

func (x *TimeseriesRow) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesRow.ProtoReflect.Descriptor instead.
func (*TimeseriesRow) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{36}
}

func (x *TimeseriesRow) GetTimeseriesKey() *TimeseriesKey {
	if x != nil {
		return x.TimeseriesKey
	}
	return nil
}

func (x *TimeseriesRow) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *TimeseriesRow) GetFields() []*TimeseriesField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TimeseriesRow) GetMetaCacheUpdateTime() uint32 {
	if x != nil && x.MetaCacheUpdateTime != nil {
		return *x.MetaCacheUpdateTime
	}
	return 0
}

type TimeseriesPBRows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*TimeseriesRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (x *TimeseriesPBRows) Reset() {
	*x = TimeseriesPBRows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_timeseries_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeseriesPBRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesPBRows) ProtoMessage() {}

func (x *TimeseriesPBRows) ProtoReflect() protoreflect.Message {
	mi := &file_timeseries_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesPBRows.ProtoReflect.Descriptor instead.
func (*TimeseriesPBRows) Descriptor() ([]byte, []int) {
	return file_timeseries_proto_rawDescGZIP(), []int{37}
}

func (x *TimeseriesPBRows) GetRows() []*TimeseriesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

var File_timeseries_proto protoreflect.FileDescriptor

var file_timeseries_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22,
	0x3a, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x13,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x3d, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x73,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x46, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x1d, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x66, 0x0a, 0x18, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x73,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x4d, 0x65,
	0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x4d,
	0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x1c, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x5d, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x68, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x6c, 0x61, 0x74, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x63, 0x33, 0x32, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x74, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x43, 0x72, 0x63, 0x33, 0x32, 0x63, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x50, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x6f, 0x77, 0x73, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45,
	0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f,
	0x77, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x65, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0xa5, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x46, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x54, 0x6f, 0x47, 0x65, 0x74, 0x22, 0x3f, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x47, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74,
	0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0x7f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a,
	0x10, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x42, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x2a, 0xa9, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x3f, 0x0a,
	0x1a, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x50, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x86,
	0x01, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x06, 0x2a, 0x54, 0x0a, 0x11, 0x52, 0x6f, 0x77, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x30, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4d, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x42,
	0x04, 0x5a, 0x02, 0x2e, 0x2f,
}

var (
	file_timeseries_proto_rawDescOnce sync.Once
	file_timeseries_proto_rawDescData = file_timeseries_proto_rawDesc
)

func file_timeseries_proto_rawDescGZIP() []byte {
	file_timeseries_proto_rawDescOnce.Do(func() {
		file_timeseries_proto_rawDescData = protoimpl.X.CompressGZIP(file_timeseries_proto_rawDescData)
	})
	return file_timeseries_proto_rawDescData
}

var file_timeseries_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_timeseries_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_timeseries_proto_goTypes = []interface{}{
	(MetaQueryConditionType)(0),             // 0: otsprotocol.MetaQueryConditionType
	(MetaQueryCompositeOperator)(0),         // 1: otsprotocol.MetaQueryCompositeOperator
	(MetaQuerySingleOperator)(0),            // 2: otsprotocol.MetaQuerySingleOperator
	(RowsSerializeType)(0),                  // 3: otsprotocol.RowsSerializeType
	(MetaUpdateMode)(0),                     // 4: otsprotocol.MetaUpdateMode
	(*TimeseriesTableOptions)(nil),          // 5: otsprotocol.TimeseriesTableOptions
	(*TimeseriesTableMeta)(nil),             // 6: otsprotocol.TimeseriesTableMeta
	(*CreateTimeseriesTableRequest)(nil),    // 7: otsprotocol.CreateTimeseriesTableRequest
	(*CreateTimeseriesTableResponse)(nil),   // 8: otsprotocol.CreateTimeseriesTableResponse
	(*ListTimeseriesTableRequest)(nil),      // 9: otsprotocol.ListTimeseriesTableRequest
	(*ListTimeseriesTableResponse)(nil),     // 10: otsprotocol.ListTimeseriesTableResponse
	(*DeleteTimeseriesTableRequest)(nil),    // 11: otsprotocol.DeleteTimeseriesTableRequest
	(*DeleteTimeseriesTableResponse)(nil),   // 12: otsprotocol.DeleteTimeseriesTableResponse
	(*UpdateTimeseriesTableRequest)(nil),    // 13: otsprotocol.UpdateTimeseriesTableRequest
	(*UpdateTimeseriesTableResponse)(nil),   // 14: otsprotocol.UpdateTimeseriesTableResponse
	(*DescribeTimeseriesTableRequest)(nil),  // 15: otsprotocol.DescribeTimeseriesTableRequest
	(*DescribeTimeseriesTableResponse)(nil), // 16: otsprotocol.DescribeTimeseriesTableResponse
	(*MetaQueryCondition)(nil),              // 17: otsprotocol.MetaQueryCondition
	(*MetaQueryCompositeCondition)(nil),     // 18: otsprotocol.MetaQueryCompositeCondition
	(*MetaQueryMeasurementCondition)(nil),   // 19: otsprotocol.MetaQueryMeasurementCondition
	(*MetaQuerySourceCondition)(nil),        // 20: otsprotocol.MetaQuerySourceCondition
	(*MetaQueryTagCondition)(nil),           // 21: otsprotocol.MetaQueryTagCondition
	(*MetaQueryAttributeCondition)(nil),     // 22: otsprotocol.MetaQueryAttributeCondition
	(*MetaQueryUpdateTimeCondition)(nil),    // 23: otsprotocol.MetaQueryUpdateTimeCondition
	(*TimeseriesKey)(nil),                   // 24: otsprotocol.TimeseriesKey
	(*TimeseriesMeta)(nil),                  // 25: otsprotocol.TimeseriesMeta
	(*QueryTimeseriesMetaRequest)(nil),      // 26: otsprotocol.QueryTimeseriesMetaRequest
	(*QueryTimeseriesMetaResponse)(nil),     // 27: otsprotocol.QueryTimeseriesMetaResponse
	(*TimeseriesRows)(nil),                  // 28: otsprotocol.TimeseriesRows
	(*PutTimeseriesDataRequest)(nil),        // 29: otsprotocol.PutTimeseriesDataRequest
	(*FailedRowInfo)(nil),                   // 30: otsprotocol.FailedRowInfo
	(*MetaUpdateStatus)(nil),                // 31: otsprotocol.MetaUpdateStatus
	(*PutTimeseriesDataResponse)(nil),       // 32: otsprotocol.PutTimeseriesDataResponse
	(*GetTimeseriesDataRequest)(nil),        // 33: otsprotocol.GetTimeseriesDataRequest
	(*TimeseriesFieldsToGet)(nil),           // 34: otsprotocol.TimeseriesFieldsToGet
	(*GetTimeseriesDataResponse)(nil),       // 35: otsprotocol.GetTimeseriesDataResponse
	(*UpdateTimeseriesMetaRequest)(nil),     // 36: otsprotocol.UpdateTimeseriesMetaRequest
	(*UpdateTimeseriesMetaResponse)(nil),    // 37: otsprotocol.UpdateTimeseriesMetaResponse
	(*DeleteTimeseriesMetaRequest)(nil),     // 38: otsprotocol.DeleteTimeseriesMetaRequest
	(*DeleteTimeseriesMetaResponse)(nil),    // 39: otsprotocol.DeleteTimeseriesMetaResponse
	(*TimeseriesField)(nil),                 // 40: otsprotocol.TimeseriesField
	(*TimeseriesRow)(nil),                   // 41: otsprotocol.TimeseriesRow
	(*TimeseriesPBRows)(nil),                // 42: otsprotocol.TimeseriesPBRows
}
var file_timeseries_proto_depIdxs = []int32{
	5,  // 0: otsprotocol.TimeseriesTableMeta.table_options:type_name -> otsprotocol.TimeseriesTableOptions
	6,  // 1: otsprotocol.CreateTimeseriesTableRequest.table_meta:type_name -> otsprotocol.TimeseriesTableMeta
	6,  // 2: otsprotocol.ListTimeseriesTableResponse.table_metas:type_name -> otsprotocol.TimeseriesTableMeta
	5,  // 3: otsprotocol.UpdateTimeseriesTableRequest.table_options:type_name -> otsprotocol.TimeseriesTableOptions
	6,  // 4: otsprotocol.DescribeTimeseriesTableResponse.table_meta:type_name -> otsprotocol.TimeseriesTableMeta
	0,  // 5: otsprotocol.MetaQueryCondition.type:type_name -> otsprotocol.MetaQueryConditionType
	1,  // 6: otsprotocol.MetaQueryCompositeCondition.op:type_name -> otsprotocol.MetaQueryCompositeOperator
	17, // 7: otsprotocol.MetaQueryCompositeCondition.sub_conditions:type_name -> otsprotocol.MetaQueryCondition
	2,  // 8: otsprotocol.MetaQueryMeasurementCondition.op:type_name -> otsprotocol.MetaQuerySingleOperator
	2,  // 9: otsprotocol.MetaQuerySourceCondition.op:type_name -> otsprotocol.MetaQuerySingleOperator
	2,  // 10: otsprotocol.MetaQueryTagCondition.op:type_name -> otsprotocol.MetaQuerySingleOperator
	2,  // 11: otsprotocol.MetaQueryAttributeCondition.op:type_name -> otsprotocol.MetaQuerySingleOperator
	2,  // 12: otsprotocol.MetaQueryUpdateTimeCondition.op:type_name -> otsprotocol.MetaQuerySingleOperator
	24, // 13: otsprotocol.TimeseriesMeta.time_series_key:type_name -> otsprotocol.TimeseriesKey
	17, // 14: otsprotocol.QueryTimeseriesMetaRequest.condition:type_name -> otsprotocol.MetaQueryCondition
	25, // 15: otsprotocol.QueryTimeseriesMetaResponse.timeseries_metas:type_name -> otsprotocol.TimeseriesMeta
	3,  // 16: otsprotocol.TimeseriesRows.type:type_name -> otsprotocol.RowsSerializeType
	28, // 17: otsprotocol.PutTimeseriesDataRequest.rows_data:type_name -> otsprotocol.TimeseriesRows
	4,  // 18: otsprotocol.PutTimeseriesDataRequest.meta_update_mode:type_name -> otsprotocol.MetaUpdateMode
	30, // 19: otsprotocol.PutTimeseriesDataResponse.failed_rows:type_name -> otsprotocol.FailedRowInfo
	31, // 20: otsprotocol.PutTimeseriesDataResponse.meta_update_status:type_name -> otsprotocol.MetaUpdateStatus
	24, // 21: otsprotocol.GetTimeseriesDataRequest.time_series_key:type_name -> otsprotocol.TimeseriesKey
	34, // 22: otsprotocol.GetTimeseriesDataRequest.fields_to_get:type_name -> otsprotocol.TimeseriesFieldsToGet
	25, // 23: otsprotocol.UpdateTimeseriesMetaRequest.timeseries_meta:type_name -> otsprotocol.TimeseriesMeta
	30, // 24: otsprotocol.UpdateTimeseriesMetaResponse.failed_rows:type_name -> otsprotocol.FailedRowInfo
	24, // 25: otsprotocol.DeleteTimeseriesMetaRequest.timeseries_key:type_name -> otsprotocol.TimeseriesKey
	30, // 26: otsprotocol.DeleteTimeseriesMetaResponse.failed_rows:type_name -> otsprotocol.FailedRowInfo
	24, // 27: otsprotocol.TimeseriesRow.timeseries_key:type_name -> otsprotocol.TimeseriesKey
	40, // 28: otsprotocol.TimeseriesRow.fields:type_name -> otsprotocol.TimeseriesField
	41, // 29: otsprotocol.TimeseriesPBRows.rows:type_name -> otsprotocol.TimeseriesRow
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_timeseries_proto_init() }
func file_timeseries_proto_init() {
	if File_timeseries_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_timeseries_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesTableOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesTableMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeseriesTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimeseriesTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeseriesTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTimeseriesTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTimeseriesTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTimeseriesTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeseriesTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeseriesTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTimeseriesTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTimeseriesTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQueryCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQueryCompositeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQueryMeasurementCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQuerySourceCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQueryTagCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQueryAttributeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaQueryUpdateTimeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeseriesMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeseriesMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesRows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTimeseriesDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedRowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaUpdateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTimeseriesDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeseriesDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesFieldsToGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeseriesDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeseriesMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTimeseriesMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTimeseriesMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTimeseriesMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_timeseries_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeseriesPBRows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_timeseries_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_timeseries_proto_goTypes,
		DependencyIndexes: file_timeseries_proto_depIdxs,
		EnumInfos:         file_timeseries_proto_enumTypes,
		MessageInfos:      file_timeseries_proto_msgTypes,
	}.Build()
	File_timeseries_proto = out.File
	file_timeseries_proto_rawDesc = nil
	file_timeseries_proto_goTypes = nil
	file_timeseries_proto_depIdxs = nil
}
